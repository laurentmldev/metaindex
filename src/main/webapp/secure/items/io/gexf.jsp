<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib uri="/struts-tags" prefix="s" %> 
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 

<c:url value="/" var="mxurl"/>

<script type="text/javascript">

// ---------------- DOWNLOAD GEXF File-----------------

var MX_GEXF_RETRIEVE_PERIOD_MS=50;
var MX_GEXF_RETRIEVE_SIZE=2000;
var MX_GEXF_GEN_PROCESS_ID=999;
var _generated_gexf_file=null;
/*
public enum RAW_DATATYPE { Tunknown,
								 Ttext, 
								 Tkeyword, 
								 Tdate, 
								 Tinteger, 
								 Tshort, 
								 Tfloat ,
								 Tgeo_point,
								 Tjoin								 
								 }; 

 */
/*
 
<xs:simpleType name="attrtype-type">
  <xs:restriction base="xs:string">
	<xs:enumeration value="integer"/>
	<xs:enumeration value="long"/>
	<xs:enumeration value="double"/>
	<xs:enumeration value="float"/>
	<xs:enumeration value="boolean"/>
	<xs:enumeration value="liststring"/>
	<xs:enumeration value="string"/>
	<xs:enumeration value="anyURI"/>
  </xs:restriction>
</xs:simpleType>

 */
function rawtype2gexftype(rawtype) {
	if (rawtype=='Tshort') { return 'integer' };
	if (rawtype=='Tinteger') { return 'long' };
	if (rawtype=='Tfloat') { return 'double' };
	return 'string';	
}

function generateGexf(gexfDoc,options,items,curNbItems,totalItemsTarget) {
	
	let root = gexfDoc.documentElement;
	root.setAttribute('xmlns', 'http://www.gexf.net/1.2draft');
	root.setAttribute('version', '1.2');
	
	// Meta
	let meta = document.createElement('meta');
	root.appendChild(meta);
	
	let creator=document.createElement('creator');
	meta.appendChild(creator);
	creator.innerHTML='MetaindeX';
	
	let description=document.createElement('description');
	meta.appendChild(description);
	description.innerHTML='This is a graph file generated by MetaindeX';
	
	// Graph
	let graph=document.createElement('graph');
	root.appendChild(graph);
	graph.setAttribute('mode', 'static');
	graph.setAttribute('defaultedgetype', 'directed');
	
	// def of attributes (nodes data)
	let attributes=document.createElement('attributes');
	graph.appendChild(attributes);
	attributes.setAttribute('class', 'node');
	for (termIdx=0;termIdx<options.nodeDataFields.length;termIdx++) {
		let termDescr=options.nodeDataFields[termIdx];
		let attribute=document.createElement('attribute');
		attributes.appendChild(attribute);
		attribute.setAttribute('id', termDescr.id);
		attribute.setAttribute('title', termDescr.name);
		attribute.setAttribute('type', rawtype2gexftype(termDescr.rawDatatype));		
	}
	
	// Nodes & edges
	let nodes=document.createElement('nodes');
	graph.appendChild(nodes);
	let edges=document.createElement('edges');
	graph.appendChild(edges);
	
	let nbEdges=0;
	// create nodes
	for (var idx=0;idx<items.length;idx++) {
		 var item=items[idx];
		 let node=document.createElement('node');
		 nodes.appendChild(node);
		 node.id=item.id;
		 node.setAttribute("label",item.name)		
		 let attvalues=document.createElement('attvalues');
		 node.appendChild(attvalues);		 
		 for (termIdx=0;termIdx<options.nodeDataFields.length;termIdx++) {
			 let termDescr=options.nodeDataFields[termIdx];			 
			 if (item.data[termDescr.name]!=null && item.data[termDescr.name].length>0) {
				 let attvalue=document.createElement('attvalue');
				 attvalues.appendChild(attvalue);
				 attvalue.setAttribute("for",termDescr.id);
				 attvalue.setAttribute("value",item.data[termDescr.name]);	 
			 }			 
		 }
		 
		 //add edges
		 for (termIdx=0;termIdx<options.edgeFields.length;termIdx++) {
			 let termDescr=options.edgeFields[termIdx];			 
			 if (item.data[termDescr.name]!=null && item.data[termDescr.name].length>0) {
				 
				 let targetsListStr=item.data[termDescr.name];
				 let targetsArray=targetsListStr.split(',');
				 for (let targetIdx=0;targetIdx<targetsArray.length;targetsArray++) {
					 let targetId=targetsArray[targetIdx];
					 let edge=document.createElement('edge');
					 edges.appendChild(edge);
					 edge.setAttribute("id",nbEdges++);
					 edge.setAttribute("source",node.id);
					 edge.setAttribute("target",targetId);					 	 
				 }				 	 
			 }			 
		 }
		 
		 MxGuiLeftBar.setProgressBar(MX_GEXF_GEN_PROCESS_ID, (curNbItems++)*100/totalItemsTarget, "GEXF Generation", true);
	 }
	 
	
	return gexfDoc;
}

MxGuiLeftBar.showDownloadGexfPrevisu=function() {
	
	let catalogDescr = MxGuiDetails.getCurCatalogDescription();
	let sortedTermsNames = Object.keys(catalogDescr.terms).sort();
	
	// body
	let previsuNode=document.getElementById('gexf_contents_previsu_body_download').cloneNode(true);
	previsuNode.style.display='block';
	
	// nodes data
	let fieldsSelectionInsertSpot=previsuNode.querySelector("._nodes_data_selection_insertspot_");
	for (var termIdx=0;termIdx<sortedTermsNames.length;termIdx++) {
		let termName=sortedTermsNames[termIdx];		
		let termDescr = catalogDescr.terms[termName];
		let termDatatype = termDescr.datatype;
		if (termDatatype=="REFERENCE") { continue; }
		termTranslation=mx_helpers_getTermName(termDescr, catalogDescr)
		
		let termChoice=document.createElement("div");
		fieldsSelectionInsertSpot.appendChild(termChoice);
		let termCheck=document.createElement("input");
		termChoice.appendChild(termCheck);
		termCheck.termDescr=termDescr;
		termCheck.classList.add("_graph_node_data_field_");
		termCheck.checked=true;
		termCheck.setAttribute("type","checkbox");
		
		let termNameNode=document.createElement("span");
		termChoice.appendChild(termNameNode);
		termNameNode.innerHTML=termTranslation;
		termNameNode.style="padding-left:1rem";
		if (termTranslation!=termName) { termNameNode.innerHTML+= " ("+termName+")"; }
		
	}	
	
	// edges data
	let edgesSelectionInsertSpot=previsuNode.querySelector("._edges_selection_insertspot_");	
	for (var termIdx=0;termIdx<sortedTermsNames.length;termIdx++) {
		let termName=sortedTermsNames[termIdx];		
		let termDescr = catalogDescr.terms[termName];
		let termDatatype = termDescr.datatype;
		if (termDatatype!="REFERENCE") { continue; }
		termTranslation=mx_helpers_getTermName(termDescr, catalogDescr)
		
		let termChoice=document.createElement("div");
		edgesSelectionInsertSpot.appendChild(termChoice);
		let termCheck=document.createElement("input");
		termChoice.appendChild(termCheck);
		termCheck.termDescr=termDescr;
		termCheck.classList.add("_graph_edge_field_");
		termCheck.checked=true;
		termCheck.setAttribute("type","checkbox");
		
		let termNameNode=document.createElement("span");
		termChoice.appendChild(termNameNode);
		termNameNode.innerHTML=termTranslation;
		termNameNode.style="padding-left:1rem";
		if (termTranslation!=termName) { termNameNode.innerHTML+= " ("+termName+")"; }
		
	}	
	
	// footer
	let previsuNodeFooter=document.getElementById('gexf_contents_previsu_download_footer').cloneNode(true);
	previsuNodeFooter.style.display='block';
	
	// Go button
	let downloadBtn=previsuNodeFooter.querySelector('._downloadBtn_');
	downloadBtn.onclick=function() {
				
		let graphOptions={ nodeDataFields:[], edgeFields:[] };
		let query = MxGuiHeader.getCurrentSearchQuery();
		let selectedFiltersNames=MxGuiLeftBar.getSelectedFiltersNames();
		
		let nodesDataFields=previsuNode.querySelectorAll("._graph_node_data_field_");
		let edgesFields=previsuNode.querySelectorAll("._graph_edge_field_");
			
		for (let nodeDataFieldIdx=0;nodeDataFieldIdx<nodesDataFields.length;nodeDataFieldIdx++) {			
			let curNodeDataFieldCheckBox=nodesDataFields[nodeDataFieldIdx];
			if (curNodeDataFieldCheckBox.checked==true) {
				graphOptions.nodeDataFields.push(curNodeDataFieldCheckBox.termDescr);			
			}
		}
		
		for (let edgeFieldIdx=0;edgeFieldIdx<edgesFields.length;edgeFieldIdx++) {
			let curEdgeFieldCheckBox=edgesFields[edgeFieldIdx];
			if (curEdgeFieldCheckBox.checked==true) {
				graphOptions.edgeFields.push(curEdgeFieldCheckBox.termDescr);
			}
		}
		
		let totalNbRecieved=0;
		retrieveItemsError=function(msg) { footer_showAlert(ERROR, msg); }
		let retrieveItemsSuccess=function(itemsAnswerMsg) {			 
			 let doc = _generated_gexf_file;
			 if (doc==null) { doc=document.implementation.createDocument(null, "gexf"); }
			 generateGexf(doc,graphOptions,itemsAnswerMsg.items,totalNbRecieved,itemsAnswerMsg.totalHits);
			 totalNbRecieved=totalNbRecieved+itemsAnswerMsg.items.length;
			 						 
			 if (totalNbRecieved<itemsAnswerMsg.totalHits) {
				 let timer = setInterval(function() { 
							clearInterval(timer);
							 MxApi.requestCatalogItems({
								 	"fromIdx":totalNbRecieved,							 
			 						"size":MX_GEXF_RETRIEVE_SIZE,
			 						"query":query,
			 						"filtersNames":selectedFiltersNames,			 						
			 						"successCallback":retrieveItemsSuccess,
			 						"errorCallback":retrieveItemsError});
						}, 
						MX_GEXF_RETRIEVE_PERIOD_MS);
				
			} else {
				var serializer = new XMLSerializer();
				var xmlString = serializer.serializeToString(doc);	
				doc=null;
				MxGuiLeftBar.setProgressBar(MX_GEXF_GEN_PROCESS_ID, 100, "GEXF Generation", false);
				downloadContentsAsFile(catalogDescr.name+".gexf", xmlString);				 
			}
			
		}
		
		MxApi.requestCatalogItems({ "fromIdx":0,
		 						"size":MX_GEXF_RETRIEVE_SIZE,
		 						"query":query,
		 						"filtersNames":selectedFiltersNames,			 								 						
		 						"successCallback":retrieveItemsSuccess,
		 						"errorCallback":retrieveItemsError});

	};
	
	// show
	MxGuiHeader.showInfoModal("<s:text name='Items.downloadItems.asGexf' />",previsuNode,previsuNodeFooter);
	
	
	
};
</script>



 	 	  <!-- Custom gexf FileDownload button -->
          <label id="gexf_download_label"
 		  	class="_openBtn_ d-none d-sm-inline-block btn btn-sm btn-info shadow-sm mx-left-button" 
 		  	onclick="MxGuiLeftBar.showDownloadGexfPrevisu();" >
 		  	<i class="fas fa-download fa-sm text-white" style="margin-right:1em"></i><s:text name="Items.downloadItems.asGexf"></s:text>
 		  	 <span title="S.O.S" 
	                	onclick="event.stopPropagation();event.preventDefault();
	                			MxGuiHeader.showInfoModal('<s:text name="help.items.gexf_download.title" />','<s:text name="help.items.gexf_download.body" />')">
	                   <i class="mx-help-icon far fa-question-circle" style="color:white"></i>    
	          </span>
 		  </label>
 		  
 		 <div id="gexf_contents_previsu_body_download" style="display:none">
 		 	<h5>Nodes Data</h5>
 		  	 <div class="_nodes_data_selection_insertspot_">	 		  	
		  	</div>
		  	<hr/>
		  	<h5>Edges</h5>
		  	<div class="_edges_selection_insertspot_">	 		  	
		  	</div> 		  			 		  		 
		  </div>
		  <div id="gexf_contents_previsu_download_footer" style="display:none">
 		  		 <label class="_downloadBtn_ d-none d-sm-inline-block btn btn-sm btn-info shadow-sm mx-left-button"  >
 		  				<i class="fas fa-download fa-sm text-white" style="margin-right:1em"></i><s:text name="Items.downloadItems.generateGexf"></s:text>
 		  		</label>
		  </div>
 		 