//////// memo docker commands

# monitor CPU/memory usage
docker stats

$ docker system prune --force --volumes
$ docker images
$ docker inspect <imgid> 
# log to running container
$ docker exec -it <container_id> bash

$ docker-compose -f docker-compose.yml up -d
$ docker-compose -f docker-compose.yml up --no-start
$ docker-compose -f docker-compose.yml ps
$ docker-compose -f docker-compose.yml down

$ docker ps
CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS                               NAMES
9c2611cb2ed1        phpmyadmin/phpmyadmin   "/docker-entrypoint.…"   2 minutes ago       Up 51 seconds       0.0.0.0:8888->80/tcp                phpmyadmin
6d6e5b260f08        kibana:7.5.0            "/usr/local/bin/dumb…"   2 minutes ago       Up 2 minutes        0.0.0.0:5601->5601/tcp              kibana
178f00d0ad4a        elasticsearch:7.5.0     "/usr/local/bin/dock…"   2 minutes ago       Up 2 minutes        9200/tcp, 9300/tcp                  elasticsearch
7a8c5c28f038        mysql:5                 "docker-entrypoint.s…"   2 minutes ago       Up 2 minutes        0.0.0.0:3306->3306/tcp, 33060/tcp   mxsql

$ docker logs 7a8c5c28f038
$ docker rm 7a8c5c28f038

$ docker stats

$ docker volume ls
$ docker volume inspect <volum name> 


# copy file from docker container to host
docker cp <containerId>:/file/path/within/container /host/path/target


### Docker tcpdump
# from https://rmoff.net/2019/11/29/using-tcpdump-with-docker/

# build container
docker build -t tcpdump - <<EOF 
FROM ubuntu 
RUN apt-get update && apt-get install -y tcpdump 
CMD tcpdump -i eth0 
EOF

So that’s built me a local image with tcpdump on:

$ docker images
REPOSITORY   TAG      IMAGE ID      CREATED             SIZE
tcpdump      latest   eebe12b8051f  31 minutes ago      98.3MB

I’m interested in the communication between these two containers:

$ docker ps
CONTAINER ID        IMAGE                                          COMMAND                   CREATED             STATUS                  PORTS                              NAMES
20a7bb264c82        confluentinc/ksqldb-server:0.6.0               "/usr/bin/docker/run"     17 hours ago        Up 42 minutes           0.0.0.0:8088->8088/tcp             ksqldb-server
df2be147f1ef        confluentinc/cp-kafka-connect:5.4.0-beta1      "bash -c 'echo \"Inst…"   17 hours ago        Up 17 hours (healthy)   0.0.0.0:8083->8083/tcp, 9092/tcp   kafka-connect-01

Using Docker’s ability to run a container that attaches to the network of another with the --network=container:<container_name> option we can now run tcpdump "piggybacked" on my container of interest:

docker run --tty --net=container:ksqldb-server tcpdump
docker run --tty --net=container:ksqldb-server tcpdump tcpdump -N -A 'port 8083'



## find real path of docker volumes

$ ls /var/lib/docker/volumes/<volume-name>/_data/ 

$ docker volume ls

### create external volume

docker volume create --name=my_data

# and then from docker-compose :
volumes: 
  my_data:
    external: true

